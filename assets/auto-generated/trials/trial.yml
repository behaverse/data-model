- categories:
  - Key
  variable_name: response_id
  required: true
  data_type: PRIMARY KEY
  description: A unique identifier assigned to responses in temporal order, meaning
    that larger IDs correspond to more recent responses that occurred later in time.
    This ID is unique within this table; no two rows share the same value.
  notes:
  - This identifier is used by other tables, for example @Stimulus table which describes
    in greater detail the sequence of images shown during a trial, their timing, and
    visual properties. That table will refer to this `id` in order to link those descriptions
    (typically multiple lines in the  Stimulus table) to a unique row in the @Trial
    table.
- categories:
  - Context
  variable_name: study_name
  required: true
  data_type: string
  description: The name of the study or experiment.
- categories:
  - Context
  variable_name: group_name
  required: false
  data_type: string
  description: Subjects may be assigned to different groups. Typically, different
    groups will have different experiences within a study.
- categories:
  - Context
  variable_name: agent_id
  required: true
  data_type: string
  description: A unique identifier assigned to the agent (typically person) generating
    the responses. This ID tracks their participation and responses throughout the
    study. See @Subjects table.
- categories:
  - Context
  variable_name: session_id
  required: true
  data_type: integer
  description: When there are multiple sessions, this variable indicates the order
    of each session (i.e., the first session completed by the subject has `session_index`
    = 1, the second session has `session_index` = 2; even if the second session is
    an exact repetition of the first one.
  range: index of session within subject.
  notes:
  - "We currently don\u2019t use session_name, session_id and session_repetition in\
    \ this table."
- categories:
  - Context
  variable_name: activity_index
  required: false
  data_type: index
  description: When subjects complete multiple activities (e.g., a cognitive test
    followed by a questionnaire), this variable indicates the order of each activity
    (i.e., the first activity completed by the subject has `activity_index` = 1, the
    second session has `activity_index` = 2; even if the second activity is an exact
    repetition of the first one.
  range: 1-based index of activity within the subject-level data.
  notes:
  - .tip See @Studyflow table for more details.
- categories:
  - Task
  variable_name: language
  required: false
  data_type: string
  description: The language the task was completed in, expressed as a two-letter code
    within the [ISO_639-1 standard](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
- categories:
  - Task
  variable_name: instrument_id
  required: true
  data_type: string
  description: The unique identifier of the instrument used for collecting data (e.g.,
    the name of the computer script used to run the test). Unique in the @Instrument
    table and corresponding files in the `instruments/` folder.
  range: '`id` in the @Instrument table.'
- categories:
  - Task
  variable_name: instrument_repetition
  required: false
  data_type: integer
  description: The number of times this particular instrument has already been completed
    anytime in the past by this particular subject in this study. This variable has
    a value 0 the first time an instrument is used.
  range: 0-based
- categories:
  - Task
  variable_name: timeline_id
  required: false
  data_type: string
  description: Timelines are specific parameterization of an instrument and their
    identifiers are unique within the corresponding table for the instrument in the
    `instruments/` folder.
- categories:
  - Task
  variable_name: timeline_repetition
  required: false
  data_type: integer
  description: The number of times this particular timeline has already been completed
    anytime in the past by this particular subject in this study. This variable has
    a value 0 the first time a timeline is completed.
  range: 0-based
- categories:
  - Task
  variable_name: multitask_type
  required: true
  data_type: enum
  description: Subjects may be required to perform multiple tasks at the same time.
    This variable indicates the type of multitasking required.
  range: '- Empty: No multitasking, i.e., single-tasking.

    - `concurrent`: There are two independent tasks that need to be completed in parallel.

    - `compound`: The task requires multiple successive stages or involves tasks that
    are dependent/coupled.'
  notes:
  - .important If no multitasking was involved, leave this field blank.
  - '.warning This characterization of `multitasking_type` is rudimentary and will
    likely evolve in the future.

    '
- categories:
  - Task
  variable_name: task_index
  required: false
  data_type: index
  description: when `multitask_type` is not empty, `task_index` refers to each of
    the individual tasks. For example, for auditoy-visual dual N-back, `task_index=1`
    is the auditory task and `task_index=2` is the visual task.
  range: 1-based index.
- categories:
  - Task
  variable_name: job_type
  required: false
  data_type: string
  description: The general type of operation the subject needs to perform. The job
    typically is expressed as a verb (e.g., "recall", "sort") and can be the same
    for different instruments (e.g., Digit Span test and Spatial Span test both have
    a job of type "recall-forward").
- categories:
  - Task
  variable_name: job_description
  required: false
  data_type: string
  description: "The more specific description of a job, which gives more information\
    \ about what the participant sees and has to do. Whereas the `job_type` typically\
    \ uses only verbs and adjectives, the `job_description` also contains nouns (e.g.,\
    \ \u201Crecall-digits-forward\u201D, \u201Crecall-letters-backward\u201D)."
- categories:
  - Task
  variable_name: job_repeat
  required: false
  data_type: enum
  description: Whether this trial's job has not been seen before in this timeline
    (i.e., specific version of the instrument).
  range: '- `new`: The job has never been seen before by this subject in the current
    study.

    - `repeat`: The job is the same as the previous trial.

    - `switch`: The job is different from the previous trial but has been seen prior
    in the timeline.'
- categories:
  - Task
  variable_name: block_index
  required: true
  data_type: index
  description: Refers to the order in which this block has been experienced by the
    subject. When there are multiple blocks, this variable indicates the order of
    each block (i.e., the first block completed by the subject has `block_index=1`,
    the second block has `block_index=2`, even if the second block is an exact repetition
    of the first one).
  range: 1-based index of the block within the timeline
  notes:
  - .important In questionnaires, `block_index` may refer to distinct pages where
    each page may contain multiple questions.
- categories:
  - Task
  variable_name: block_name
  required: false
  data_type: string
  description: "The name of a particular block in a timeline. If the same block is\
    \ completed twice in a row, they would have different `block_index` values (1\
    \ and 2, respectively) but they would have the same `block_name` (e.g., \u201C\
    NB_timeline1_block1\u201D). More details about the `block_name` is available in\
    \ the @Instrument table."
- categories:
  - Task
  variable_name: block_type
  required: true
  data_type: enum
  description: Specifies the experimental role of the block (e.g., tutorial, practice,
    test, instruction).
  range: '- `tutorial`: A simplified version of the test designed to teach participants
    how the test works.

    - `practice`: Typically identical to the main test blocks but are used to get
    subjects accustomed to the task in a no-stakes environment.

    - `test`: Primary blocks used to measure the desired behaviors.

    - `instruction`: Presents written and/or visual instructions to the subject.'
- categories:
  - Task
  variable_name: transformation_name
  required: true
  data_type: string
  description: 'Refers to the specific events-to-trials function used to construct
    rows of this table from raw events. The transformation (or projection in DDD terminology)
    embodies the definition of a trial for a particular task.


    The transformer name refers to a code in the format of a function `f(trial_state,
    event) => trial_state`, where `event` is the event occurred during the performance
    of the task, and `trial_state` is the data stored for the trial. The final state
    of a trial is thus the result of applying a sequence of projections such that
    `trial = f(f(f(initial()), e), e), e)`.'''
  notes:
  - '- The transformation/projection encapsulates the domain rules that define a "trial"
    for a given task. It defines what constitutes a "trial".

    '
- categories:
  - Task
  variable_name: trial_index
  required: true
  data_type: id
  description: Sequential identifier representing number of times transformation rule
    to the events occurred. It increases with each re-computation of the trial based
    on updated or newly received events.
  range: Preferably 1-based integer index.
  notes:
  - .tip This field emphasizes order of trials and alignment with projection-based
    definition of trials. A more complete name would be `projection_index` or `pojected_trial_index`.
    For brevity, BDM uses `trial_id` instead.
- categories:
  - Task
  variable_name: episode_index
  required: false
  data_type: index
  description: Episodes are temporally distinct bins of time (no overlap and discrete).
    The binning of the time into successive episodes depends on the task; it is mostly
    used and necessary to group data in cases where two distinct trials occurred at
    the same time (e.g., dual N-back).
  range: 1-based interger index.
- categories:
  - Task
  variable_name: trial_start_datetime
  required: true
  data_type: datetime
  description: The the first event of the trial occured.
- categories:
  - Task
  variable_name: trial_seed
  required: false
  data_type: integer | string
  description: Random seed used in the trial (if any).
- categories:
  - Stimulus
  variable_name: stimulus_index
  required: false
  data_type: list[index]
  description: Indexes in chronological (or spatial) order the stimuli shown within
    an instrument (counting one stimulus per response). `stimulus_index` may for instance
    be used to refer to the nth question asked within a questionnaire.
  notes:
  - Use semicolon-separated indices if more then one stimulus were presented, e.g.,
    `1;2;3`.
- categories:
  - Stimulus
  variable_name: stimulus_id
  required: true
  data_type: integer
  description: Is a unique identifier for the (unitary, set or sequence of) stimuli
    presented during a trial; if those exact same stimuli are repeated in a different
    trial, that trial would have the same value for stimulus_id. stimulus_id may also
    be used to refer to a specific message or question in a questionnaire.
- categories:
  - Stimulus
  variable_name: stimulus_type
  required: true
  data_type: enum
  description: 'BDM distinguishes the following stimulus types: messages and questions'
  range: '- `message`: The stimulus is a message shown to subjects (e.g., task instructions).

    - `question`: The stimulus may consist of text, images and/or sounds; they require
    subjects to make a decision based on the content of the stimulus.'
- categories:
  - Stimulus
  variable_name: stimulus_onset
  required: false
  data_type: float
  description: Duration between the start of the trial and the appearance of the stimulus,
    in seconds.
  range: In seconds
- categories:
  - Stimulus
  variable_name: stimulus_panel_count
  required: false
  data_type: integer
  description: The number of panels or screen areas stimuli may appear on during the
    trial. For example, in a task where stimuli to be compared are presented on the
    left and right side of the screen, stimulus_panel_count = 2.
- categories:
  - Stimulus
  variable_name: stimulus_structure
  required: false
  data_type: enum
  description: 'We distinguish three stimulus structures: unitary, set, sequence'
  range: '- `unitary`: Only one stimulus is shown, alone.

    - `set`: Many stimuli are shown, either at the same time or not; order does not
    matter.

    - `sequence`: Multiple stimuli are shown, either at the same time or not; order
    does matter (order may be indicated by the order of presentation or by a digit
    for example).'
- categories:
  - Stimulus
  variable_name: stimulus_structure_source_type
  required: false
  data_type: enum
  description: 'Indicates the type of method used to generate the stimulus_structure
    (this is relevant when a trial displays a sequence of or set of stimuli): none,
    preset, generator'
  range: "- `none`: when stimulus_structure == unitary.\",\n- `preset`: The structure\
    \ of stimuli is hard coded in a file.\n- `generator`: A procedure was used to\
    \ generate the stimulus_structure.\n "
- categories:
  - Stimulus
  variable_name: stimulus_structure_source
  required: false
  data_type: string
  description: Refers to the specific generator used to produce the stimulus_structure
    (e.g., sequence of digits in a digit span test). When no generator was used, this
    variable has a value of none.
- categories:
  - Stimulus
  variable_name: stimulus_set_size
  required: false
  data_type: integer
  description: The number of different values each presented stimulus could have taken.
    This value gives an indication of the complexity of the stimulus space. When this
    number is large we set this variable to infinity, when for any reason it was not
    computed, it has a value of NA.
  notes:
  - To specify "infinity" in a CSV file we use +Inf and -Inf; these are correctly
    recognized in R (tidyverse) and Python (pandas) as being valid numbers rather
    than strings.
- categories:
  - Stimulus
  variable_name: stimulus_count
  required: false
  data_type: integer
  description: The number of stimuli shown to the participant during the trial.
  range: This should match number of stimuli in stimulus_id
- categories:
  - Stimulus
  variable_name: stimulus_source_type
  required: false
  data_type: enum
  description: A stimulus is typically created using a particular procedure/algorithm
    ("generator") or is sampled from a particular set ("set"). This variable indicates
    which of these two applies for the current stimulus.
  range: '- "set":"stimulus is sampled from a fixed set of stimuli."

    - "generator": "stimulus is created using a procedure/algorithm."'
- categories:
  - Stimulus
  variable_name: stimulus_source
  required: false
  data_type: string
  description: Refers to the specific generator or set the stimulus belongs to. Stimuli
    that stem from the same source have the same data scheme and could thus be described
    in a table named after stimulus_source (i.e., stimulus_source indicates which
    table contains the full information about the stimulus; e.g., "digit1to9").
- categories:
  - Stimulus
  variable_name: stimulus_index_in_source
  required: false
  data_type: integer
  description: 'Index of the stimulus within the table referred to by stimulus_source.
    : For example, if stimulus_source == "digit1to9", stimulus_index_in_source = 1
    refers to "1" while for stimulus_source == "LettersAtoD", stimulus_index_in_source
    = 1 refers to "A".'
  notes:
  - It is not because a particular stimulus_source is used in a given timeline that
    all possible stimuli of that source are displayed to the user. For example, the
    AX-CPT may use "upper-case-letters" but only use a subset of those letters (e.g.,
    "A", "B", "X", "Y"). Whenever possible, we specify the most relevant/specific
    set (e.g., "digit1to9" rather than "digit").
- categories:
  - Stimulus
  variable_name: stimulus_position_index
  required: false
  data_type: integer
  description: Refers to discrete positions on the screen the stimulus may appear
    on. The set and ordering of possible positions depends on the test. Whenever possible,
    it follows a natural order (left to right, top to bottom), but in free-form layouts,
    indices are arbitrary.
- categories:
  - Stimulus
  variable_name: stimulus_description
  required: false
  data_type: string
  description: A human readable, compact description of the main aspects of the stimulus.
    The description for a given stimulus depends on the task but follows a specific
    template for a given task. Because of this, it looks like the stimulus_description
    could be "parsed" and "tidied"---however, this is not the intention; parsed/tidied
    data will be available in other tables; description is for human readability and
    facilitates the understanding of the data.
  notes:
  - In some cases, when stimuli are too complex or can't be precisely described, a
    summary of all stimuli is given instead.
- categories:
  - Stimulus
  variable_name: stimulus_role
  required: false
  data_type: enum
  description: 'A stimulus may play different roles within a trial. Below is a list
    of some possible roles:'
  range: '- "target": "A stimulus the subject must process and which should trigger
    the completion of the response (e.g., classify, reach, memorize) if the subject
    is doing the task as intended. Note that in some cases (e.g., in a go/no-go task)
    the correct response to a stimulus is to NOT click the button. In this case, the
    stimulus that triggered the decision to NOT click the button is still a *target*."

    - "non_target": "A stimulus the subject must process but which does not trigger
    the completion of the response (e.g., the first two stimuli in a 2-back test)."

    - "distractor": "A stimulus the subject should not process at all (i.e., ignore)
    and which is unrelated to the correct execution of the task."

    - "location_cue": "A stimulus giving a spatial location information that subjects
    could use to improve their performance."

    - "job_specifier": "A stimulus specifying which job the subject should perform."

    - "stop_signal": "A stimulus signaling the participant he should abort his current
    action."

    - "probe": "A stimulus indicating about which stimulus to respond."'
- categories:
  - Option
  variable_name: option_source_type
  required: false
  data_type: enum
  description: "A set of options is typically created using a particular procedure/algorithm\
    \ (\u201Cgenerator\u201D) or is sampled from a particular set (\u201Cset\u201D\
    ). This variable indicates which of these two applies for the current options."
- categories:
  - Option
  variable_name: option_source
  required: false
  data_type: string
  description: Refers to the specific generator or set that determined the options
    on a given trial. Option that stem from the same source have the same data scheme
    and could thus be described in a table named after option_source (i.e., option_source
    indicates which table contains the full information about the option set).
  notes:
  - "While there is a stimulus_index_in_source to refer to the particular stimulus\
    \ that was used, we don\u2019t have an equivalent opiton_index_in_source since\
    \ all options are displayed. Instead, we use response_index and expected_response_index\
    \ to refer to a particular option within the set of options."
- categories:
  - Option
  variable_name: option_count
  required: false
  data_type: integer
  description: The number of options the participant can choose from on a given trial.
- categories:
  - Option
  variable_name: option_id
  required: false
  data_type: integer
  description: Is a unique identifier for the option (set or generator) used on a
    given trial.
- categories:
  - Option
  variable_name: option_data_type
  required: false
  data_type: enum
  description: 'Describes the type of data this option entails. Possible values include:'
  range: "- \"nominal\": Set of unordered labels (e.g., {\u201CLuxembourg\u201D, \u201C\
    France\u201D, \u201CGermany\u201D}).\n- \"ordinal\": \"Ordered values without\
    \ clear distance (e.g., {\u201Ca lot\u201D, \u201Ca bit\u201D, \u201Cnot at all\u201D\
    }).\n- \"interval\": Ordered values with clear distances but no absolute zero\
    \ (e.g., 10 versus 20 degrees Celsius).\n- \"ratio\": Values with clear distance\
    \ metrics and absolute zero (e.g., length in cm).\n"
- categories:
  - Option
  variable_name: measurement_type
  required: false
  data_type: enum
  description: 'Describes the type of measurement implied by Option which in turn
    has implications on how that data should be processed during analysis; takes a
    value in:'
  range: "- \"nominal\": Set of unordered labels (e.g., {\u201CLuxembourg\u201D, \u201C\
    France\u201D, \u201CGermany\u201D}).\n- \"ordinal\": \"Ordered values without\
    \ clear distance (e.g., {\u201Ca lot\u201D, \u201Ca bit\u201D, \u201Cnot at all\u201D\
    }).\n- \"interval\": Ordered values with clear distances but no absolute zero\
    \ (e.g., 10 versus 20 degrees Celsius).\n- \"ratio\": Values with clear distance\
    \ metrics and absolute zero (e.g., length in cm).\n"
- categories:
  - Input
  variable_name: input_interface_type
  required: false
  data_type: enum
  description: 'Refers to the type of interface subjects used to input actions. Possible
    values include (non-exhaustive):'
  range: '- `keyboard`: A keyboard is displayed on the screen.

    - `buttons`: Dedicated buttons on the screen.

    - `stimulus-button`: Stimuli serves as buttons.

    - `text-field`: A text field is displayed on the screen.

    - `slider`: A slider is displayed on the screen.

    '
- categories:
  - Input
  variable_name: input_action_type
  required: false
  data_type: enum
  description: 'Refers to the type of action the subject performs to give a response.
    Possible values include (non-exhaustive):'
  range: '- "mouse-click"

    - "mouse-release"

    - "key-press"

    - "key-release"

    - "mouse-drag"

    - "touch"

    - "swipe"'
  notes:
  - The type of input_action determines the structure of detailed response data (i.e.,
    mouse-click data is different from key-press data).
- categories:
  - Input
  variable_name: input_count
  required: false
  data_type: integer
  description: The number of inputs (i.e., actions) the user made during the trial.
  notes:
  - For mouse-drag, it corresponds to the number of drag points that have been sampled
    during the drag-and-drop.
- categories:
  - Expectation
  variable_name: expected_response_option_index
  required: false
  data_type: integer
  description: The index of the option the subject is expected to choose from the
    set of options.
  notes:
  - When expected_response_index = 0, it means that the subject should not respond
    at all.
  - '

    Sometimes stimuli serve both as stimuli and as response options as subjects have
    to click on a particular stimuli to give their response (e.g., spatial span, odd
    one out). It is convenient in those cases to use stimulus_position_index to order/index
    the options (i.e., option_index == stimulus_position_index) and consequently also
    the responses.'
- categories:
  - Expectation
  variable_name: expected_response_description
  required: false
  data_type: string
  description: A description of the expected response using the same convention as
    response_description.
- categories:
  - Response
  variable_name: response_structure
  required: false
  data_type: string
  description: 'The structure of the response required by the subject; can take values
    in:'
  range: '- `unitary`: The subject provides a single input (e.g., chooses option *same*).

    - `set`: The subject provides a set of information, and the order does not matter
    (e.g., list words that start with the letter *A*).

    - `sequence`: The subject provides a sequence of information, and the order matters
    (e.g., a sequence of memorized digits in their order of appearance).'
  notes:
  - Note that the distinction between set and sequence refers to the importance of
    order information to evaluate if the response is correct or not; a response with
    a set structure may unfold over time (each piece of information is given in a
    particular temporal order) and it may be of scientific interest to take into account
    that order; however, the order itself is not important within the task itself.
    For example, in the [MOT task](https://en.wikipedia.org/wiki/Multiple_object_tracking)
    one may ask subjects to point to all dots that hide a token. If subjects point
    to all such dots they will be correct no matter in which order the dots were clicked
    in.
- categories:
  - Response
  variable_name: response_count
  required: false
  data_type: integer
  description: "Each trial contains by definition only one response. However, when\
    \ response_structure is other than unitary, a response comprises multiple pieces\
    \ of information (e.g., \u201C3-5-7\u201D could be one response in the digit span\
    \ task and this response contains three components, namely \u201C3\u201D, \u201C\
    5\u201D and \u201C7\u201D). response_count refers to the number of components\
    \ that make up a response (not the number of responses within a trial)."
  notes:
  - response_count is different from input_count; a subject may in some cases change
    their response multiple times before submitting the final response. In such cases,
    there would be many more inputs than there are components to the final response.
  - "While we have stimulus_set_size we currently don\u2019t have a response_set_size,\
    \ but we do have option_count and response_count."
- categories:
  - Response
  variable_name: response_option_index
  required: false
  data_type: integer
  description: The index of the option the participant chose, starting from 1.
  notes:
  - "response_option_index = 0 means the subject chose none of the options (e.g.,\
    \ a \u201Cno-go\u201D response in a Go/No-go task)."
  - response_index can be directly compared to expected_response_index.
  - response_index refers to an entry in the Option table (i.e., there is no  Response
    table).
- categories:
  - Response
  variable_name: response_description
  required: false
  data_type: string
  description: "A description of participant\u2019s response; typically the description\
    \ of the option that was chosen."
  notes:
  - response_description can be directly compared to expected_response_description.
- categories:
  - Response
  variable_name: response_numeric
  required: false
  data_type: float
  description: A numeric value associated with a particular response; this could be
    a numeric value entered directly by the subject or the numeric meaning of a selected
    option (for example, the choice of option "Never" may be associated with the numeric
    value of 0). Note that this variable describes the subject's response; it does
    not describe the value (e.g., correctness or goodness) that is associated with
    that response.
- categories:
  - Response
  variable_name: response_time
  required: false
  data_type: float
  description: The duration, in seconds, between the earliest possible time a response
    could have been completed and the moment that response was actually completed
    (and NOT when it was initiated).
- categories:
  - Response
  variable_name: response_datetime
  required: false
  data_type: datetime
  description: The datetime corresponding to the completion of the response.
- categories:
  - Response
  variable_name: response_validation_time
  required: false
  data_type: float
  description: In some cases, subjects may need to press an extra key to validate
    previous responses. When relevant, this variable may encode this duration.
- categories:
  - Response
  variable_name: response_initiation_time
  required: false
  data_type: float
  description: In some cases (e.g., a reaching movement) it might be useful to encode
    when a response was initiated.
- categories:
  - Response
  variable_name: response_skipped
  required: false
  data_type: boolean
  description: In some cases (e.g., in some questionnaires), subjects have the option
    to skip a question.
- categories:
  - Response
  variable_name: timed_out
  required: false
  data_type: boolean
  description: Some tasks require subjects to give a response within a certain time
    limit. When subjects fail to respond before that time runs out, timed_out is set
    to TRUE.
- categories:
  - Evaluation
  variable_name: accuracy
  required: false
  data_type: float
  description: A task-dependent accuracy measure ranging from 0 to 1 (inclusive).
- categories:
  - Evaluation
  variable_name: correct
  required: false
  data_type: boolean
  description: Indicates whether the response matches the expected response (i.e.,
    correct = TRUE) or not (i.e., correct = FALSE).
- categories:
  - Evaluation
  variable_name: score
  required: false
  data_type: float
  description: A numeric value associated with a particular response in a given context.
    This variable may be used to compute a performance metric or a questionnaire level
    index (e.g., a well-being score).
- categories:
  - Evaluation
  variable_name: evaluation_label
  required: false
  data_type: enum
  description: "There are several labels that can be assigned to a given response\
    \ to specify what that response means in terms of evaluation within a task. The\
    \ most general terms are \"correct\u201D and \"error\" (which are already given\
    \ by the correct variable). There are however more specific sets of terms that\
    \ may apply in different contexts. For example, in a signal detection task, it\
    \ is common to use labels from the signal detection theory framework (i.e., \u201C\
    hit\u201D, \u201Cmiss\u201D, \u201Cfalse alarm\u201D, \u201Ccorrect rejection\u201D\
    ). In other contexts, researchers might use terms like \u201Comission\u201D or\
    \ \u201Ccommission\u201D errors or even things like \u201Cperseveration\u201D\
    \ error (e.g., in the Wisconsin Card Sorting Test). Note that these terms are\
    \ not always well defined or exclusive. For example, a \u201Chit\u201D is also\
    \ a \u201Ccorrect\u201D response and a \u201Cfalse alarm\u201D may be synonymous\
    \ to \u201Ccommission error\u201D. Whenever possible use the more specific terms\
    \ (i.e., always use \u201Chit\u201D rather than \u201Ccorrect\u201D when applicable).\n\
    Here are few evaluation labels that are commonly used:"
  range: '- `correct`: The response is correct.

    - `error`: The response is incorrect.

    - `hit`: The stimulus was *present* and the subject correctly responded *present*.

    - `miss`: The stimulus was *present* and the subject correctly responded *absent*.

    - `fa`: The stimulus was *absent* and the subject correctly responded *present*.

    - `cr`: The stimulus was *absent* and the subject correctly responded *absent*.

    '
- categories:
  - Feedback
  variable_name: feedback_description
  required: false
  data_type: string
  description: 'Lists the different kinds of feedback that were shown on a given trial.
    When multiple types of feedback were used, feedback will list them using `;` as
    a separator. If a given type of feedback was shown multiple times during a trial,
    that feedback type is listed only once (i.e., feedback_description does NOT represent
    the sequence of feedbacks).

    The possible values for feedback are:'
  range: '- `none`: No feedback was shown.

    - `expected_response`: Feedback indicated what the correct response would have
    been.

    - `explanation`: Feedback explains *why* a certain option is the correct one.

    - `correctness_on_option`: "Feedback indicates (on the option itself) if the option
    chosen by the participant was the correct one (e.g., in green), or not (e.g.,
    in red).

    - `correctness_on_screen`: "Feedback displayed on the screen center indicates
    if the response to the current trial was correct or not (e.g., using a green check
    or a red cross).'
  notes:
  - "This list is not exhaustive and characterizing feedback in the future will involve\
    \ more variables (e.g., separating the type of information shown (e.g., correctness)\
    \ and how it is shown (\u201Con_option\u201D versus \u201Con_screen\u201D)."
  - "NOTE2: We don\u2019t consider here as \u201Cfeedback\u201D, the kind of feedback\
    \ that is used in UI to confirm to users that a button has indeed been clicked."
- categories:
  - Outcome
  variable_name: outcome_description
  required: false
  data_type: string
  description: Describes the observable consequences of the subject's response (e.g.,
    "the opened box is empty").
- categories:
  - Outcome
  variable_name: outcome_numeric
  required: false
  data_type: float
  description: A numeric value describing the observable consequences of the subject's
    response (e.g., +3 points).
- categories:
  - Accessory
  variable_name: additional_measures
  required: false
  data_type: string
  description: 'Indicates whether additional measures have been recorded during this
    trial and if so what kind of measures they are. Possible values include (non-exhaustive):'
  range: '- `mouse_trajectories`

    - `fmri`

    - `eye_tracking`

    - `heart_rate`'
  notes:
  - .important Leave this field empty if no additional measures were recorded for
    this specific response.
- categories:
  - Experimental Design
  variable_name: adaptive_method_name
  required: false
  data_type: enum
  description: Specifies the adaptive procedure used to modify instrument parameters
    in response to subject performance (e.g., `staircase`).
- categories:
  - Experimental Design
  variable_name: adaptive_method_config
  required: false
  data_type: string
  description: More detailed configuration for the adaptive method, including initial
    values, step sizes, and termination criteria.
  notes:
  - .note For example, `1up-2down`. The 1-up, 2-down is a common adaptive staircase
    procedure used to estimate a subject's threshold or sensitivity. After a correct
    response, the difficulty level is increased, and after two incorrect responses,
    the difficulty level is decreased.
- categories:
  - Experimental Design
  variable_name: adaptive_parameter_name
  required: false
  data_type: string
  description: Specific instrument parameter that is dynamically modified based on
    the subject's performance.
- categories:
  - Experimental Design
  variable_name: adaptive_parameter_value
  required: false
  data_type: any
  description: The specific value of the instrument parameter that was used for this
    trial. This value is updated as the adaptive algorithm adjusts the parameter based
    on the subject's responses.
  range: Data type depends on the type of the adaptive parameter, as defined in `adaptive_parameter_name`)
- categories:
  - Experimental Design
  variable_name: adaptive_parameter_value_next
  required: false
  data_type: any
  description: The next value of the adaptive parameter that will be used in the subsequent
    trial, as determined by the adaptive algorithm.
  range: Data type depends on the type of the adaptive parameter, as defined in `adaptive_parameter_name`)
