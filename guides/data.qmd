---
title: Data
---

Data can be described using terms that indicate how it has been "collected", "stored", "organized", or "processed". As data is the core of BDM, it is worth describing such terms quickly to make explicit what we mean when we use them.

## Common terms

### Process: *Raw vs. Derived*
Data that has not been processed is termed **raw data**. And data that is computed from other data, for example summary statistics, is called **derived data**. For reproducible research, it is essential to share raw data along with the analysis code. This allows others to replicate all analyses within a research project from the raw data, rather than relying only on derived data.

### Format: *Native vs. Tidy*
Different systems may record data in a variety of forms (e.g., structured, unstructured) and file formats (e.g., CSV, JSON, MAT); this is data in its **native**, and commonly wide, format. **Tidy** data is organized in long-format table where each row is an observational record and each column is a variable or property of that record. See [Tidy Data paper](https://vita.had.co.nz/papers/tidy-data.pdf) for more information. BDM recommends that data be stored in a *tidy* format.

### Storage: *Datalake vs. Warehouse vs. Lakehouse*
A [**datalake**](https://martinfowler.com/bliki/DataLake.html) refers to an unstructured collection of data, typically from many different sources. On the one hand, the *data lake* can be seen as maximally flexible (accepting all sorts of data including tables in different formats, images, texts) and holding the potential for limitless data analysis; on the other hand, it can be seen as a chaotic data dump or swamp.

A **data warehouse** organizes the incoming data in a consistent way (schema-on-write) before storing or querying it. In most cases, data from warehouses can be readily used for downstream analysis. Data from data lakes, however, require significant background knowledge and effort to be processed.

There is, however, a new architecture that combines the best of both worlds: the ***data lakehouse***. A *data lakehouse* benefits from the flexibility of data lakes and provides an intermediate semi-structured language (along with schema-on-read) that provides quick and flexible access to the data in real-time.

:::{.callout}
The term [**data mart**](https://en.wikipedia.org/wiki/Data_mart) is sometimes used to refer to a subset or a view of the data warehouse that is optimized for specific data use and users.
:::

### Organize: *Database vs. Dataset*
A [**database**](https://en.wikipedia.org/wiki/Database) usually refers to a collection of data that is managed by a database management system (DBMS). A database typically implies some form of interaction between the data and the end users who read/write data from or into the database.

A [**dataset**](https://en.wikipedia.org/wiki/Data_set) also refers to a collection of data, but while a database is a "living" entity, a dataset is typically a static resource that can be downloaded and shared as a whole (e.g., the [PISA 2012 dataset](https://www.oecd.org/en/data/datasets/pisa-2012-database.html)). A dataset can be defined by a data collection campaign (e.g., all the data collected within a research project) or a data analysis campaign (e.g., a dataset created from a larger medical database that focuses specifically on mental health issues during the COVID pandemic).

## Confusing terms

It is sometimes easy to confuse the terms described above. For example, data in native format is often called raw data even though the data may in fact contain derived data (for example, the overall score a person achieved on a school test alongside all individual responses and their correctness). Data in its native format is often messy but could in some cases be tidy.

Note also that it is not always clear what is meant by "processing" and what still counts as "raw data". In BDM, data is no longer considered "raw" when the data has been processed in a way that reflects assumptions about the scientific values of the variables and relationships between them. For example, filtering out trials with response times shorter than 150 milliseconds because one believes that such short durations imply those responses are not valid, is a form of data processing which is "biased" and thus the resulting, filtered data cannot no longer be considered "raw". On the other hand, if for some reason, a system logs the same events multiple times, removing duplicates is a pre-processing step that is not biased and hence, the resulting, filtered data should still be considered "raw" data.

In general, we believe that the following operations may be performed on original native-format data without compromising the "raw" status of the resulting data:
- selection of variables
- renaming variables and enum values
- changes of units (from example, converting milliseconds to seconds)
- reordering of columns and rows
- removing duplicates
- joining or splitting tables

## Which data to store and which to share?
It is typically the case that more data is stored than shared. For example, researchers may store participants' contact information or specific parameters of the hardware being used. The question then arises: what information should be collected initially, what subset of that data should be shared, and whether the native-format data should be sent along with the tidy data extracted from it.

Regarding what data to store, the answer depends on the purpose of the study. In any case, participants need to be informed about what data is being collected and the data collection must follow relevant regulations. It is generally well advised to be parsimonious regarding which personal data to collect (https://martinfowler.com/bliki/Datensparsamkeit.html).

In BDM, native data should not be shared if one has the ability to extract and share better formatted data. There are three main reasons not to share source data:

- native data may not be useable: they can be messy, come in diverse, sometimes proprietary formats, and lack documentation.
- native data may contain personal data the data sharer is not aware of (e.g., participants’ full name, IP address); by defining what data is to be shared and extracting only that data it seems that such accidental privacy breaches could be avoided.
- the extraction of data from the native data into usable data is outside the scope of responsibility of the data analyst. This last point deserves further explaining. For research to be reproducible one may want to test all the steps from the data collection up to the final results. While all the steps might be tested, they are not necessarily tested by the same person. For instance, a software company may run tests to determine that the recorded timestamps are accurate and a lab technician may run tests to calibrate the monitor and other hardware equipments. The question of what data to share is related to what quality assurance requirements are expected to be fulfilled by the data analyst. If both the data in the native format and data extracted from that are handed over to the data analyst it becomes the data analyst’s responsibility to verify that both sets of data are in fact in agreement. If there is an error in the pre-processing codes, the data analysit becomes responsible because he/she had access to that and could thus have spotted and corrected the error. For that, in BDM, the preparation of usable data from the original data in native format is not the responsibility of the data analyst; it is the responsibility of the data engineer and the entity that is sharing the data. It remains however that in any case tests must be conducted to verify the validity and accuracy of the process (put simply, this is not the role of the person receiving the data).

In short then, "don’t share original unformatted data in its native format", instead share well documented, well formatted raw data.

## File formats

In general, open file formats (e.g., `.csv`, `.json`, `.md`) are preferred over proprietary file formats (e.g., `.mat`, `.sav`, `.docx`). Open formats ensure that the data is accessible to a wide audience. Specifically, use the following formats:

| Data Type | Recommended Format | When? |
|------------------------|----------------------------|---------------------|
| Tabular data | `.csv` | Always |
| Structured data | `.json` | For machine-focused applications |
|  | `.yml` | When human readability and editability matter |
| Text | `.md` | Always in Markdown, except for official, static, or administrative documents which may be in PDF |

Do NOT save the same data in multiple output formats (e.g., `.csv` and `.sav`) to avoid redundancy and version mismatches. However, lossless data conversion must be used if converting data to other formats.