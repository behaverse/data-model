---
order: 1
output-file: getting-started
icon: bi bi-reception-1
difficulty: INTRO
title: Getting started
subtitle: Understand what BDM is and how to use it
code-block-bg: true
format:
  html:
    code-copy: false
---

## What is BDM?

Behaverse Data Model (BDM for short) is a dataset architecture that aims to provide interoperable data for modern cognitive projects. It is a set of conventions that help you organize behavioral data in a way that is easy to understand for both domain experts and technical experts. It is designed to work with a wide range of cognitive tests and questionnaires.

Whether you're an individual scientist or part of a larger lab, BDM can help you build a dataset that is easy to maintain and share with others. BDM is opinionated but designed to be flexible and extensible, so you can adapt it to your specific needs.

## How does a BDM dataset look like?

A BDM dataset is a collection of files and directories that follow a specific structure. Here is an example of a simple BDM dataset:

```{.default .file-tree}
dataset/
├── README.md       # <1>
├── agents.csv      # <2>
├── instruments/    # <3>
└── data/           # <4>
    ├── agent_1/    # <4>
    ├── agent_2/    # <4>
    └── agent_3/    # <4>
```

1. The `README.md` file contains both human-readable description of the dataset (as markdown) and machine-readable metadata (as YAML front matter).

2. The `agents.csv` file contains information about the human subjects and artificial agents in the dataset. It is a CSV file with one row per agent and columns for attributes.

3. The `instruments/` folder contains parameters for the tasks, instructions, and questionnaires. Each instrument represented as a YAML file that describes the instrument and its parameters. The instrument files are named after the instrument name, e.g., `instruments/DigitSpan.yaml`, and contain the various parameters for the instrument.

4. The `data/` folder contains the data files. Within this folder, there is one folder per each agent (human or machine participants of the study). This [directory-based](https://arrow.apache.org/docs/python/generated/pyarrow.dataset.partitioning.html) [partitioning](https://en.wikipedia.org/wiki/Partition_(database)) makes it easier to access and manage the data.


## Data files

The `data/` folder contains the data files. Within this folder, data files are organized as `<AGENT>/<SESSION>/<ACTIVITY>/<DATA_FILE>`. This [directory-based](https://arrow.apache.org/docs/python/generated/pyarrow.dataset.partitioning.html) [partitioning](https://en.wikipedia.org/wiki/Partition_(database)) allows for easy access to the data files and makes it easier to manage the data.

The `data/<AGENT>/` folder contains the data for a single human subject or computer agent, and the `data/<AGENT>/<SESSION>/` folder contains the data for a single session. Each session can contain multiple activities, and each activity can contain data files for several attempts.

Th `data/<AGENT>/` folder also contains additional data for the [studyflows](../spec/general/3-studyflows.qmd) and other data types.

For example, the `data/` folder for a dataset of three subjects, each with two sessions, and each session with two activities might look like this:

```{.default .file-tree}
...
data/
├── agent_1/
│   ├── studyflow.csv
│   ├── session_1/
│   │   ├── UFOV/
│   │   │   └── ...
│   │   └── DigitSpan/
│   │       └── ...
│   └── session_2/
│       ├── UFOV/
│       │   └── ...
│       └── DigitSpan/
│           └── ...
├── agent_2/
│   ├── studyflow.csv
│   └── session_1/
│       ├── UFOV/
│       │   └── ...
│       └── DigitSpan/
│           └── ...
└── agent_3/
    ├── studyflow.csv
    ├── session_1/
    │   ├── UFOV/
    │   │   └── ...
    │   └── DigitSpan/
    │       └── ...
    └── session_2/
        ├── UFOV/
        │   └── ...
        └── DigitSpan/
            └── ...
```

Note that:

- Each agent has a folder named `agent_<ID>` where `<ID>` is a unique identifier for the human subject or computer agent. `<ID>` can be a number or a string, but must be unique within the dataset. For convenience, if your dataset contains only human subjects, you may also use the `data/subject_<ID>/` format to name the folders, but the root data folder remains `data/`. But it is recommended to use the `agent_<ID>` format for all datasets, as it is more flexible and extensible.
- The `studyflow.csv` file contains the order and metadata of the all activities for the agent.
- Each session has a folder named `session_<ID>` where `<ID>` is a unique identifier for the session. Session identifiers are unique within the dataset, so `session_01` for `agent_01` is the same as `session_01` for `agent_02`.
- Each activity has a folder named `<AGENT>/<SESSION>/<ACTIVITY>` where `<ACTIVITY>` is the name of the activity. In this example, the activities are `UFOV` and `DigitSpan`. For each activity, there is an instrument file in the `instruments/` folder with the same name.
- The general idea of using file path to partition data is similar to the dataset partitioning in [Apache Arrow](https://arrow.apache.org/docs/python/generated/pyarrow.dataset.partitioning.html) or [DuckDB](https://duckdb.org/docs/stable/data/partitioning/hive_partitioning.html).

## Levels of data

The BDM dataset is organized into three levels of data:


Events
: Events are the lowest level of data in BDM. They represent the raw data collected during an activity. For example, in a `DigitSpan` activity, an event might be a single digit that the subject has to remember and the timestamp when the digit was presented. Events are stored in the `events.csv` file within the activity folder.

Trials
: Trials are a higher level of data that represent a single attempt at an activity accompanied by the subject's response and experimenter's interpretation of the response. For example, in a `DigitSpan` activity, a trial might be a sequence of digits that the subject has to remember. Trials are stored in the `trial_<ATTEMPT>.csv` file within the activity folder.

Models
: Models are the highest level of data that represent the data analysis and interpretation of the trials. For example, in a `DigitSpan` activity, a model might be the subject's working memory capacity or a more comples one, like a deep learning model that predicts the subject's performance.

The main data in behavioral data analysis is the trials. Events are the raw data collected during an activity, and models are the data analysis and interpretation of the trials. The following sections assumes trials as the main data.


## Activities data

See the [*<i class="bi bi-grid-3x3"></i> Trial* table](/spec/trials/1-trial.qmd) for more information. Trials are stored in the `trial_<ATTEMPT>.csv` file within the activity folder and can be accompanied by the optional supporting tables for stimuli, options, etc.


Within the activity folders, you will find the data files collected during the activity. Here is an example of a `DigitSpan` activity folder:

```{.default .file-tree}
...
DigitSpan/
├── trial_1.csv
├── trial_2.csv
├── stimulus_1.csv
├── stimulus_2.csv
├── option_1.csv
└── option_2.csv
```

- The `trial_<ATTEMPT>.csv` contains the data collected during the `DigitSpan` activity, where `<ATTEMPT>` is 1-indexed suffix and partitions data by how many times the agent has initiated the activity, e.g., first attempt, second attempt, etc. <br />If there was only one attempt to complete the activity, then it can be named `trial_1.csv`. If there were multiple attempts, then the file can be named `trial_1.csv`, `trial_2.csv`, etc.
- In the example above, there are two attempts for the `DigitSpan` activity, so there are two trial tables: `trial_1.csv` and `trial_2.csv`.

## Instruments

The `instruments/` folder contains the instrument files. Each instrument file is a YAML file that describes the instrument and its parameters. Here is an example of a `UFOV` instrument file:

```{.default .file .yaml}
name: UFOV
description: |
  The Useful Field of View (UFOV) test is a measure of visual attention. The test consists of three subtests: processing speed, divided attention, and selective attention.

parameters:
  - name: subtest
    description: The subtest of the UFOV test
    type: enum
    values:
      - processing_speed
      - divided_attention
      - selective_attention
```
